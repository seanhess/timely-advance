# https://vadosware.io/post/zero-to-continuous-integrated-testing-a-haskell-project-with-gitlab/
# Caching! https://docs.gitlab.com/ee/ci/yaml/README.html#cache
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
# https://angristan.xyz/build-push-docker-images-gitlab-ci/


# these stages should match the pipeline
stages:
  - build # we are running tests in the build stage for now. See --test below
  - deploy


build-elm:
  stage: build
  before_script:
    - docker --version
  cache:
    paths:
      - web/elm-stuff
  script:
    - docker build -t $IMAGE_WEB:$RELEASE web


# This is the fastest
build:
  stage: build
  before_script:
    - docker --version
    - stack --version
  script:
    - cd server
    - echo "module Version where version = \"$RELEASE\"" > src/Version.hs
    - cat src/Version.hs
    - stack docker pull
    - stack setup --docker
    - stack build --docker --test


deploy:
  stage: deploy
  before_script:
    # - docker login -u sean.hess -p mbPGDyQUsyC2BG28x1wa $CI_REGISTRY
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - cd server
    - stack image container --docker
    - docker tag timely:latest $IMAGE_SERVER:$RELEASE

    - docker push $IMAGE_SERVER:$RELEASE
    - echo "Published - $IMAGE_SERVER:$RELEASE"

    - docker push $IMAGE_WEB:$RELEASE
    - echo "Published - $IMAGE_WEB:$RELEASE"

cache:
  paths:
    - .stack
    - server/.stack-work

variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack"
  VERSION: "0.2"
  RELEASE: "$VERSION.$CI_COMMIT_SHORT_SHA"
  IMAGE_SERVER: "$CI_REGISTRY/timely-advance/timely"
  IMAGE_WEB:    "$CI_REGISTRY/timely-advance/timely/web"
