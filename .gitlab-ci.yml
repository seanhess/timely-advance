# https://vadosware.io/post/zero-to-continuous-integrated-testing-a-haskell-project-with-gitlab/
# Caching! https://docs.gitlab.com/ee/ci/yaml/README.html#cache
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
# https://angristan.xyz/build-push-docker-images-gitlab-ci/

# this should match stack.yaml
# image: fpco/stack-build:lts-13.7
# image: haskell:8
# image: docker:stable


# TODO: docker (for uploading)
# TODO: make my own image? with haskell:8, node, etc?

# before_script:
#   - docker info


# before_script:
#   - apt-get update -y


# The goal is produce docker containers
# don't do it this way

# these stages should match the pipeline
stages:
  - build
  - test
  - deploy


# # TODO - use the docker image to build
# # you can't use the same version for both... not without doing it in the same deply stage. ok
# build-elm:
#   stage: build
#   before_script:
#     - docker --version
#   cache:
#     paths:
#       - web/elm-stuff
#   script:
#     - docker build -t registry.gitlab.com/timely-advance/timely:$VERSION.$CI_COMMIT_SHORT_SHA web



build:
  stage: build
  before_script:
    - docker --version
    - stack --version
  script:
    - cd server
    - echo "RELEASE $RELEASE"
    - echo "VERSION $VERSION"
    # - stack docker pull
    # - stack setup --docker
    # - stack build --docker --test --only-dependencies


# test:
#   stage: test
#   script:
#     - cd server
#     - stack test --docker


# deploy:
#   stage: deploy
#   script:
#     - cd server
#     - stack image container --docker
#     # - VERSION=$(stack exec --docker timely version)
#     - docker tag timely:latest registry.gitlab.com/timely-advance/timely:$HASH
#     - docker tag timely/web:latest registry.gitlab.com/timely-advance/timely/web:$VERSION.$HASH
#     - docker push registry.gitlab.com/timely-advance/timely:$VERSION.$HASH

cache:
  paths:
    - .stack
    - server/.stack-work

variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack"
  VERSION: "0.2"
  RELEASE: "$VERSION.$CI_COMMIT_SHORT_SHA"
