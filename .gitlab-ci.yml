# https://vadosware.io/post/zero-to-continuous-integrated-testing-a-haskell-project-with-gitlab/
# Caching! https://docs.gitlab.com/ee/ci/yaml/README.html#cache
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
# https://angristan.xyz/build-push-docker-images-gitlab-ci/

# this should match stack.yaml
# image: fpco/stack-build:lts-13.7
# image: haskell:8
# image: docker:stable


# TODO: docker (for uploading)
# TODO: make my own image? with haskell:8, node, etc?

# before_script:
#   - docker info


# before_script:
#   - apt-get update -y


# The goal is produce docker containers
# don't do it this way

# these stages should match the pipeline
stages:
  - build
  - test
  - deploy


# TODO - use the docker image to build
# build-elm:
#   stage: build
#   image: docker:stable
#   # cache:
#   #   paths: []
#       # - web/elm-stuff
#   script:
#     - docker build -t timely/web web
#   #   - pwd
#   #   - ls node_modules/.bin
#   #   - node_modules/.bin/elm --version
#   #   - node_modules/.bin/elm make src/Main.elm --output=elm.js
#   before_script:
#     - docker info
#   # artifacts:
#   #   paths:
#   #   - web/elm.js


# image: haskell:8

before_script:
  - docker --version
  - stack --version


build:
  stage: build
  script:
    - cd server
    - stack docker pull
    - stack setup --docker
    - stack build --docker --test --only-dependencies



test:
  stage: test
  script:
    - cd server
    - stack test --docker




deploy:
  stage: deploy
  script:
    - cd server
    - stack image container --docker

cache:
  paths:
    - .stack
    - server/.stack-work

variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack"
